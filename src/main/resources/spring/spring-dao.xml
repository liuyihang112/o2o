<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 配置整合mybatis过程 -->
	<!-- 1.配置数据库相关参数properties的属性：${url} -->
	<context:property-placeholder location="classpath:jdbc.properties" />
	
	<!-- 2.数据库连接池 -->
	<bean id="abstractDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" abstract="true" destroy-method="close">
		<!-- c3p0连接池的私有属性 -->
		<property name="maxPoolSize" value="30" />
		<property name="minPoolSize" value="10" />
		<!-- 关闭连接后不自动commit -->
		<property name="autoCommitOnClose" value="false" />
		<!-- 获取连接超时时间 -->
		<property name="checkoutTimeout" value="10000" />
		<!-- 当获取连接失败后重试次数 -->
		<property name="acquireRetryAttempts" value="2" />
	</bean>
	<bean id="master" parent="abstractDataSource">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.master.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<bean id="slave" parent="abstractDataSource">
		<property name="driverClass" value="${jdbc.driver}"/>
		<property name="jdbcUrl" value="${jdbc.slave.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 接下来要把我们配置的两套dataSource传入到DynamicDataSource中 -->
	<!-- 配置动态数据源，这里的targetDataSources就是路由数据源所对应的名称 -->
	<bean id="dynamicDataSource" class="com.imooc.o2o.dao.split.DynamicDataSource">
		<property name="targetDataSources">
			<map>
				<entry value-ref="master" key="master"></entry><!-- value-ref 与此间定义的bean id一致    key的话和holder中定义的lookupkey一样就可以了-->
				<entry value-ref="slave" key="slave"></entry> <!-- map的key-value定义。只不过这里把value指定为bean对应的实例对象罢了 -->
			</map>
		</property>
	</bean>
	<!-- 把动态数据源这个bean放入LazyConnectionDataSourceProxy连接池中做懒加载。因为动态数据源需要在sql正式执行之后再去指定相应的数据源，机制与mybatis的延迟加载机制一样 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
		<property name="targetDataSource">
			<ref bean="dynamicDataSource"/>
		</property>
	</bean>
	
	
	<!-- 3.配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 配置Mybatis全局配置文件：mybatis-config,xml -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- 扫描entity包,使用别名 -->
		<property name="typeAliasesPackage" value="com.imooc.o2o.entity"/>
		<!-- 扫描sql配置文件mapper需要的.xml -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
	</bean>
	
	<!-- 4.配置扫描DAO接口包，动态实现DAO接口，注入到Spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出需要扫描的DAO接口包 -->
		<property name="basePackage" value="com.imooc.o2o.dao" />
	</bean>
</beans>

